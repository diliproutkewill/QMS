package com.foursoft.etrans.common.util.ejb.sls;

/* *********************************************** 
* Generated by Pramati version 1.0 EJBWizard
* Bean type: Stateless Session Bean
*
* You can have ONLY ONE ejbCreate() method. 
* It SHOULD NOT take ANY parameter
* It can throw any RMI exception 
*
* Fri Oct 13 20:34:53 GMT+05:30 2000 
* ************************************************/
/*Enterprise Bean instance can throw javax.ejb.EJBException or
* java.lang.RuntimeException to its container to report that the invoked
* business method or callback method could not be completed because of an
* unexpected error (e.g. the instance failed to open a database connection).
*/
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.ejb.EJBException;
import javax.ejb.CreateException;
import javax.naming.InitialContext;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import javax.naming.NamingException;
//import com.foursoft.esupply.common.util.Logger;
import org.apache.log4j.Logger;

import com.foursoft.esupply.common.util.ConnectionUtil;
import com.foursoft.etrans.setup.codecust.bean.CodeCustModelDOB;
import com.foursoft.esupply.common.bean.ESupplyGlobalParameters;
import com.foursoft.etrans.common.util.java.OperationsImpl;
import com.foursoft.etrans.air.hawb.bean.HouseDocumentCustDtl;
import com.foursoft.etrans.setup.codecust.exception.CodeCustNotDoneException;
/**
 * class name e :OIDSessionBean
 * @author :
 * @version  :1.6
 */
public class OIDSessionBean	implements SessionBean
{
	private static final String FILE_NAME = "OIDSessionBean.java";
	private  SessionContext sessionContext = null;
	private  InitialContext initialContext = null;
	private  DataSource     dataSource     = null;
	private  OperationsImpl operationsImpl	= null;
  private static Logger logger = null;

public OIDSessionBean()
{
  logger  = Logger.getLogger(OIDSessionBean.class);
}
	//Place your business methods here.
	
  /**
   * 
   * @throws javax.ejb.CreateException
   */
	public void ejbCreate()
		throws CreateException
	{
				operationsImpl = new OperationsImpl();
			operationsImpl.createDataSource();

	}

  /**
   * 
   * @return oid
   */
	public long getRoutePlanId()  
	{
		Connection  connection   = null;
		long oid = 0L;
		try
		{
			connection = getConnection();
			oid = generateOID( connection, "RTPLAN" );
			return oid;
		}
		catch( Exception e ) 
		{
			//Logger.error(FILE_NAME,"Error in OIDSessionBean:getRoutePlanId , Exception is : "+e);
      logger.error(FILE_NAME+"Error in OIDSessionBean:getRoutePlanId , Exception is : "+e);
			return oid;
		}
		finally
		{
			try
			{
					  if(connection != null )
					   { connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return oid;
			}
		}
	}
  /**
   * 
   * @return 
   * @throws com.foursoft.etrans.setup.codecust.exception.CodeCustNotDoneException
   */
  public String getRouteOID()throws CodeCustNotDoneException 
	{
		Connection connection=null;
		try
		{
			connection=getConnection();
            String strOid=null;
            do
            {
			    strOid = generateCodeCustOID( connection, "ETSROUTEID","");
            }while(checkForIdExists(strOid,"FS_FRS_ROUTEMASTER","ROUTEID"));
			return strOid;
		}catch( SQLException e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return null;
		}
		finally
		{
			try
			{
				if(connection != null )
				{ connection.close(); }
			}
			catch( SQLException e )
			{
					//Logger.error(FILE_NAME,"Exception is : "+e);
          logger.error(FILE_NAME+"Exception is : "+e);
					return null;
			}
		}
	}
  /**
   * 
   * @param id
   * @param tableName
   * @param columnName
   * @return idExists
   */
   private boolean checkForIdExists(String id,String tableName,String columnName)
    {
        boolean idExists=false;
        Connection con=null;
        Statement st=null;
        ResultSet rs=null;
        try
        {
            String sqlQry=" SELECT "+columnName+" FROM "+tableName+" WHERE "+columnName+"='"+id+"'";
           // Logger.info(FILE_NAME," checkForIdExists qry"+sqlQry);
            con=getConnection();
            st=con.createStatement();
            rs=st.executeQuery(sqlQry);
            if(rs.next())
                {idExists=true;}
            
        }catch(Exception ex)
        {
            //Logger.error(FILE_NAME,"Unable to check id for exists",ex);
            logger.error(FILE_NAME+"Unable to check id for exists"+ex);
        }
        finally
        {
            try
            {
                if(rs!=null){ rs.close();}
                if(st!=null){ st.close();}
                if(con!=null){ con.close(); }
            }catch(Exception ex)
            {
                //Logger.error(FILE_NAME,"Unable to close the resources in checkForIdExists()",ex);
                logger.error(FILE_NAME+"Unable to close the resources in checkForIdExists()"+ex);
            }
            
        }
        //Logger.info(FILE_NAME," idExists"+idExists);
        return idExists;
    }
  /**
   * 
   * @param con
   * @param refCode
   * @param type
   * @return 
   * @throws com.foursoft.etrans.setup.codecust.exception.CodeCustNotDoneException
   */
  private String generateCodeCustOID(Connection con,String refCode,String type)throws CodeCustNotDoneException
	{
		Statement stmt = null;
		ResultSet rs   = null;
		try
		{
						 
			stmt = con.createStatement();
			//@@ 20050224 SEQUENCE IMPLEMENTATION
			//stmt.executeUpdate("UPDATE FS_FR_CONFIGPARAM SET STARTINGSLNO = STARTINGSLNO+1 WHERE CODEIDNAME='"+refCode+"'");
			rs = stmt.executeQuery(	" SELECT STARTINGSLNO, VALGRP1, VALGRP2, VALGRP3, "+refCode+"_SEQ.NEXTVAL"+
									" FROM FS_FR_CONFIGPARAM, DUAL"+
									" WHERE CODEIDNAME='"+refCode+"'");
			//@@ 20050224
			String oid="";
			String valGrp1="";
			String valGrp2="";
			String valGrp3="";
			if(rs.next())
			{
				valGrp1=(rs.getString("VALGRP1")==null)?"":rs.getString("VALGRP1").trim();
				valGrp2=(rs.getString("VALGRP2")==null)?"":rs.getString("VALGRP2").trim();
				valGrp3=(rs.getString("VALGRP3")==null)?"":rs.getString("VALGRP3").trim();
				oid=valGrp1+valGrp2+valGrp3+type+rs.getString("STARTINGSLNO");
				return oid;
			}else
			{
			    throw new CodeCustNotDoneException("Code Customization not done for "+refCode);
			}
		}
		catch( SQLException e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			throw new EJBException("Unable to generate oid for code "+refCode+"\n"+e.getMessage());
		}
		finally
		{
			try
			{
				if(rs !=null){ rs.close();}
				if( stmt != null ){   stmt.close();}
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return "";
			}
		}	
	}
  /**
   * 
   * @return 
   * @throws javax.ejb.EJBException
   */
  public String getRunsheetOID()
	{
        Connection  connection   = null;
        try
        {
           
           //to get running serial no	
           connection = getConnection();
           int oid = generateOID( connection, "RUNSHEET" );
           String strOid = (new Integer(oid)).toString();
           
           return strOid;
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
 		    throw new EJBException("getRunsheetOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{
   				
               if(connection != null )
    			{ connection.close(); }
			}
			catch( SQLException e )
			{
 				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
				 throw new EJBException( "getRunsheetOID::finally::..."+e.toString() );			
			}
   		}
	}
  /**
   * 
   * @return strOid
   */
	public String getBankOID() 
	{
		Connection  connection   = null;
		try
		{
			connection = getConnection();
			int oid = generateOID( connection, "BANK" );
			String strOid = (new Integer(oid)).toString();
			return strOid;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return null;
		}
		finally
		{
			try
			{
				if(connection != null )
				{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return null;
			}
		}
	}
  /**
   * 
   * @return oid
   */
	public int getAddressOID()
	{
		Connection  connection   = null;
		try
		{
			connection = getConnection();
			int oid = generateOID( connection, "ADDRESS" );
			return oid;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return 0;
		}
		finally
		{
			try
			{
				if(connection != null )
				{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return 0;
			}
		}
	}
	//added by durga on 22nd march 2001 for accounts starts here
  /**
   * 
   * @return oid
   */
	public int getAccountsBookOID() 
	{
		Connection  connection   = null;
		try
		{
			connection = getConnection();
			int oid = generateOID( connection, "ACBOOK" );
			return oid;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return 0;
		}
		finally
		{
			try
			{
			   if(connection != null )
				{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return 0;
			}
		}
	}

	/*
	 *	The following method fetches the ids from the database based on the
	 *	condition specified and passing parameter from the client. This method
	 *	is used to display ids in the LOVs.
	 *  Returns String if the specified conditions are satisfied else
	 *	returns CodeCustNotDoneException along with "CND" string value.
	 *	@param arrayList	getCodeCustId
	 *	@param value		ESupplyGlobalParameters loginbean, String type.
	 *	Author:				Supraja	CKM
	 */

  /**
   * 
   * @param loginbean
   * @param type
   * @return 
   * @throws com.foursoft.etrans.setup.codecust.exception.CodeCustNotDoneException
   */
	public String getCodeCustId(ESupplyGlobalParameters loginbean, String type) throws CodeCustNotDoneException 
	{
        Connection  connection	  =	null;
        Statement   stmt		      =	null;
        ResultSet	rs			        =	null;

        String		type1		      = "";
        String		locationId	  = "";	
        String    strOid        = "";
        String    terminalId    = "";
        String[]	valGrp		    =	new String[3];
		
        int[]		valLen		  = new int[3];
        int			noOfGrps	  = 0;
        long			slNo		  = 0L;
		int			count		  = 0;

		try
		{
			connection	=	getConnection();
			stmt		=	connection.createStatement();
     // Logger.info(FILE_NAME,"loginbean::"+loginbean.getTerminalId());
			terminalId  = loginbean.getTerminalId();
			
			if(loginbean.getLocationId().trim().length() <= 4)
			{	locationId	=	loginbean.getLocationId().substring(0,3); }
			else
				{ locationId	=	loginbean.getLocationId().substring(3,6); }
			
			//locationId	=	loginbean.getLocationId().substring(3,6);
			//type1	=	type+"ID";

		    String sql = "SELECT COUNT(*) FROM FS_FR_CONFIGPARAM WHERE CODEIDNAME = '"+type+"' AND TERMINALID='"+terminalId+"'";
		
			rs          = stmt.executeQuery(sql);
			
		 while(rs.next())
	        { count = rs.getInt(1); }


			if(stmt != null)
				{ stmt.close(); }
			if(rs != null)
				{ rs.close();	 }

			stmt		= connection.createStatement();


			if(count > 0)
			{					 
			//@@ 20050224 SEQUENCE IMPLEMENTATION 
			//stmt.executeUpdate("UPDATE FS_FR_CONFIGPARAM SET STARTINGSLNO = STARTINGSLNO+1 WHERE CODEIDNAME='"+type1+"' AND TERMINALID='"+terminalId+"'");
			rs = stmt.executeQuery(	" SELECT VALGRP1, VALGRP2, VALGRP3, VALLEN1,VALLEN2,VALLEN3, NOOFGRPS, "+type+"_SEQ.NEXTVAL"+
									" FROM FS_FR_CONFIGPARAM, DUAL"+
									" WHERE CODEIDNAME='"+type+"' AND TERMINALID='"+terminalId+"'");
			//@@ 20050224
			}
			else
			{
				//@@ 20050224 SEQUENCE IMPLEMENTATION 
				//stmt.executeUpdate("UPDATE FS_FR_CONFIGPARAM SET STARTINGSLNO = STARTINGSLNO+1 WHERE CODEIDNAME='"+type1+"' AND TERMINALID IN (SELECT TERMINALID FROM FS_FR_TERMINALMASTER WHERE OPER_ADMIN_FLAG ='H')");
				rs = stmt.executeQuery( " SELECT VALGRP1,VALGRP2,VALGRP3,VALLEN1,VALLEN2,VALLEN3,NOOFGRPS,"+type+"_SEQ.NEXTVAL"+
										" FROM FS_FR_CONFIGPARAM, DUAL"+
										" WHERE CODEIDNAME='"+type+"'"+
										" AND TERMINALID IN (SELECT TERMINALID FROM FS_FR_TERMINALMASTER WHERE OPER_ADMIN_FLAG ='H')");
				//@@ 20050224
			}

					
			while(rs.next())
			{
				valGrp[0] = (rs.getString(1)==null)?"":rs.getString(1).trim();
				valGrp[1] = (rs.getString(2)==null)?"":rs.getString(2).trim();
				valGrp[2] = (rs.getString(3)==null)?"":rs.getString(3).trim();

				valLen[0] =	rs.getInt(4);
				valLen[1] =	rs.getInt(5);
				valLen[2] =	rs.getInt(6);

				noOfGrps  =	rs.getInt(7);
				slNo	  = rs.getLong(8);	
				
			}
			
			for(int i=0;i<noOfGrps;i++)
			{
//Logger.info(FILE_NAME,"valGrp[i]:	"+valGrp[i]);
				if(valGrp[i] != null && valGrp[i].equals("COMPANY") || valGrp[i].equals("COMPANYID"))
				{
//Logger.info(FILE_NAME,"valGrp[i] 222:	"+valGrp[i]);
					if(loginbean.getCompanyId().length() <= valLen[i])
						{ valGrp[i] = (loginbean.getCompanyId()).substring(0,loginbean.getCompanyId().length()); }
					  else
						{ valGrp[i] = (loginbean.getCompanyId()).substring(0,valLen[i]); }

				}
				else if(valGrp[i] != null && valGrp[i].equals("LOCATION"))
				{
					   if(locationId.length() <= valLen[i])
						{ valGrp[i] = (locationId).substring(0,locationId.length());}
					  else
						{ valGrp[i] = (locationId).substring(0,valLen[i]); }
				}
				if(valGrp[i] != null && !(valGrp[i].equals("COMPANY")) && !(valGrp[i].equals("LOCATION")) && !(valGrp[i].equals("COMPANYID")))
				{
					if(valGrp[i].length() <= valLen[i])
						{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length()); }
					  else
						{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }
				}

			}
			

//			int oid = generateOID( connection, type1 );
//			strOid = (new Integer(oid)).toString();
			strOid	= valGrp[0]+valGrp[1]+valGrp[2]+slNo;	

//Logger.info(FILE_NAME,"strOid 555:	"+strOid);

			if(strOid != null && !(strOid.equals("nullnullnull0")))
			{
				//Logger.info(FILE_NAME,"StrOid 000:	"+strOid);
				return strOid;
			}
			else
			{

				strOid	=	"CND";
				//Logger.info(FILE_NAME,"StrOid 111:	"+strOid);
				throw new CodeCustNotDoneException("Code Customization not done for "+type1);
				
			}
		}
		catch( SQLException sqlEx )
		{
			//Logger.error(FILE_NAME,"Exception is : "+sqlEx);
      logger.error(FILE_NAME+"Exception is : "+sqlEx);
			sqlEx.printStackTrace();
			return null;
		}
		finally
		{
			try
			{
				ConnectionUtil.closeConnection(connection, stmt, rs);	
			}
			catch( Exception e )
			{
				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
	 			 e.printStackTrace();
				 return null;
			}
		}
	}

	/*
	 *	The following method fetches the ids from the database based on the
	 *	condition specified and passing parameter from the client. This method
	 *	is used to display ids in the LOVs.
	 *  Returns String if the specified conditions are satisfied else
	 *	returns CodeCustNotDoneException along with "CND" string value.
	 *	@param arrayList	getCodeCustId
	 *	@param value		String ,com.foursoft.etrans.setup.codecust.bean.CodeCustModelDOB.
	 *	Author:				Supraja	CKM
	 */


  /**
   * 
   * @param fromWhere
   * @param codeCustDOB
   * @return 
   * @throws com.foursoft.etrans.setup.codecust.exception.CodeCustNotDoneException
   */
	public String getCodeCustomisationId(String fromWhere,CodeCustModelDOB codeCustDOB) throws CodeCustNotDoneException 
	{
        Connection  connection			=	null;

        Statement   stmt		        =	null;
        ResultSet	rs			        =	null;
        Statement   stmt1		        =	null;
      //  ResultSet	rs1			        =	null;//Commented By RajKumari on 23-10-2008 for Connection Leakages.

        long		slNo				=	0L; 
		long		startSlNo			=	0L;


        String[]	valGrp		        =	new String[3];
        int[]		valLen		        =   new int[3];

        int			noOfGrps	        =	0;
        int			count				=	0;
			
        String		strDay				= "";
        String		strMonth			= "";		
        String		shipperCompany		= "";
        String		consigneeCompany	= "";
        String		converTime		    = "";
        String		monthYear		    = "";
        String      sMode				= "";
        String		sql1				= "";
		String		sql2				= "";


        //ETAUtilitiesSessionHome 	utilHome 	  = 	null;
        //ETAUtilitiesSession 		  utilRemote	=   null;
		//Logger.info(FILE_NAME,"FromWhere:   "+fromWhere);

		try
		{
				HouseDocumentCustDtl custDtl = new HouseDocumentCustDtl();

			  try
			  {
					//InitialContext 	initial	=	new InitialContext();
					//utilHome 		= 	(ETAUtilitiesSessionHome)initial.lookup("ETAUtilitiesSessionBean");
					//utilRemote		= 	(ETAUtilitiesSession)utilHome.create();

				  if(fromWhere != null && fromWhere.equals("ETSCONSIGNEMENTID") || fromWhere.equals("ETSTRUCKPRQID") || fromWhere.equals("ETSAIRPRQID") ||  fromWhere.equals("ETSSEAPRQID") || fromWhere.equals("ETSAIRINVOICEID")  || fromWhere.equals("ETSSEAINVOICEID") ||  fromWhere.equals("ETSTRUCKINVOICEID") || fromWhere.equals("ETSHOUSEDOCUMENTID") || fromWhere.equals("ETSCUSTOMERCONTRACTID") )
				  {
					custDtl			=	getCustomerDetails(codeCustDOB.terminalId,codeCustDOB.shipperId);
					shipperCompany	=	custDtl.getAbbrName();

				  }
 				  if(fromWhere != null && fromWhere.equals("ETSAIRDELIVERYORDERID") || fromWhere.equals("ETSSEADELIVERYORDERID") ||  fromWhere.equals("ETSTRUCKDELIVERYORDERID") || fromWhere.equals("ETSHOUSEDOCUMENTID"))
				  {
					custDtl			    =	getCustomerDetails(codeCustDOB.terminalId,codeCustDOB.consigneeId);
					consigneeCompany	=	custDtl.getAbbrName();

				  }
			  }
			  catch(Exception e)
			  {
				//Logger.error(FILE_NAME,"Exception Occured at getCodeCustomisationID() method: "+e);
        logger.error(FILE_NAME+"Exception Occured at getCodeCustomisationID() method: "+e);
			  }
	
			

			String terminalId	 = codeCustDOB.terminalId;
			  if(codeCustDOB.shipmentMode  == 1)
				{ sMode = "AIR";}
			  if(codeCustDOB.shipmentMode  == 2)
				{ sMode = "SEA"; }
			  if(codeCustDOB.shipmentMode  == 4)
				{ sMode = "TRUCK"; }
  

		if(terminalId != null && !(terminalId.equals("null")))
		{
				converTime	= operationsImpl.getLocalTime(terminalId);
				converTime	= converTime.substring(0,converTime.indexOf(" "));	
			if(converTime != null && converTime.length()==10)
			{
			  strDay		  = converTime.substring(0,2);
			  strMonth		  =	converTime.substring(3,5);	
			  String strYear		  =	converTime.substring(8,10);	
			  monthYear			  = strMonth+strYear;
			}
		}

			connection  = getConnection();
			stmt		= connection.createStatement();
			stmt1		= connection.createStatement();

      //String sql = "SELECT COUNT(*) FROM FS_FR_CONFIGPARAM WHERE CODEIDNAME = '"+fromWhere+"' AND TERMINALID='"+terminalId+"'";
      String sql = "SELECT COUNT(*) FROM FS_FR_CONFIGPARAM WHERE CODEIDNAME = '"+fromWhere+"'";
		
			rs          = stmt.executeQuery(sql);
			
		 while(rs.next())
	        { count = rs.getInt(1); }

			if(stmt != null)
				{ stmt.close(); }
			if(rs != null)
				{ rs.close();	}

			stmt		= connection.createStatement();

			if(count > 0)
			{
				//@@ Avinash replaced on 20041104
				/*	sql2 = "SELECT MAX(STARTINGSLNO) FROM FS_FR_CONFIGPARAM WHERE CODEIDNAME = '"+fromWhere+"' AND TERMINALID='"+terminalId+"'";
					rs   = stmt.executeQuery(sql2);

						if(rs.next())
						 startSlNo	=	rs.getLong(1);

							if(rs != null)
							rs.close();	

					 stmt.executeUpdate("UPDATE FS_FR_CONFIGPARAM SET STARTINGSLNO = "+startSlNo+"+1 WHERE CODEIDNAME='"+fromWhere+"' AND TERMINALID='"+terminalId+"'");
					 sql1 = "SELECT VALGRP1,VALGRP2,VALGRP3,VALLEN1,VALLEN2,VALLEN3,NOOFGRPS,STARTINGSLNO  FROM FS_FR_CONFIGPARAM WHERE CODEIDNAME='"+fromWhere+"' AND TERMINALID='"+terminalId+"'";
				*/
					
					//@@ 20050224 SEQUENCE IMPLEMENTATION
					 //stmt.executeUpdate(" UPDATE FS_FR_CONFIGPARAM SET STARTINGSLNO = STARTINGSLNO+1"+
						///				" WHERE CODEIDNAME='"+fromWhere+"' AND TERMINALID='"+terminalId+"'");

					 sql1 =		" SELECT VALGRP1, VALGRP2, VALGRP3, VALLEN1, VALLEN2, VALLEN3, NOOFGRPS, "+fromWhere+"_SEQ.NEXTVAL"+
								" FROM FS_FR_CONFIGPARAM, DUAL WHERE CODEIDNAME='"+fromWhere+"'";
					 //@@ 20050224 
				//@@ 20041104 
			}
			else
			{
				//@@ Avinash replaced on 20041104
				/*	sql2 = "SELECT MAX(STARTINGSLNO) FROM FS_FR_CONFIGPARAM WHERE CODEIDNAME = '"+fromWhere+"' AND TERMINALID IN (SELECT TERMINALID FROM FS_FR_TERMINALMASTER WHERE OPER_ADMIN_FLAG ='H')";
					rs   = stmt.executeQuery(sql2);

						if(rs.next())
						 startSlNo	=	rs.getLong(1);

							if(rs != null)
							  rs.close();	

					  stmt.executeUpdate("UPDATE FS_FR_CONFIGPARAM SET  STARTINGSLNO = "+startSlNo+"+1 WHERE CODEIDNAME='"+fromWhere+"' AND TERMINALID IN (SELECT TERMINALID FROM FS_FR_TERMINALMASTER WHERE OPER_ADMIN_FLAG ='H')");
					  
					  if(stmt != null)
						stmt.close();

					  stmt		= connection.createStatement();
					  sql1 = "SELECT VALGRP1,VALGRP2,VALGRP3,VALLEN1,VALLEN2,VALLEN3,NOOFGRPS,STARTINGSLNO  FROM FS_FR_CONFIGPARAM WHERE CODEIDNAME='"+fromWhere+"' AND TERMINALID IN (SELECT TERMINALID FROM FS_FR_TERMINALMASTER WHERE OPER_ADMIN_FLAG ='H')";
				*/
					 //Logger.info(FILE_NAME,"getCodeCustomisationId() BEFORE UPDATING FS_FR_CONFIGPARAM");	
					  
					  //@@ 20050224 SEQUENCE IMPLEMENTATION	
					  //stmt.executeUpdate(	" UPDATE FS_FR_CONFIGPARAM SET  STARTINGSLNO = STARTINGSLNO+1"+							
						//					" WHERE CODEIDNAME='"+fromWhere+"' AND OPER_HO_FLAG = 'H'");

					 // Logger.info(FILE_NAME,"getCodeCustomisationId() AFTER UPDATING AND BEFORE QUERYING FS_FR_CONFIGPARAM");

					  /*sql1 =	" SELECT VALGRP1, VALGRP2, VALGRP3, VALLEN1, VALLEN2, VALLEN3, NOOFGRPS, "+fromWhere+"_SEQ.NEXTVAL"+
								" FROM FS_FR_CONFIGPARAM, DUAL"+
								" WHERE CODEIDNAME='"+fromWhere+"' AND OPER_HO_FLAG = 'H'";	*/
            throw new CodeCustNotDoneException("Code Customization not done for "+fromWhere);
					  //@@ 20050224 

					 // Logger.info(FILE_NAME,"getCodeCustomisationId() AFTER QUERYING FS_FR_CONFIGPARAM");
				//@@ 20041104 	  
				

			}

		  rs = stmt.executeQuery(sql1);

			while(rs.next())
			{

				valGrp[0] = rs.getString(1);
				valGrp[1] = rs.getString(2);
				valGrp[2] = rs.getString(3);



				valLen[0] =	rs.getInt(4);
				valLen[1] =	rs.getInt(5);
				valLen[2] =	rs.getInt(6);

				noOfGrps  =	rs.getInt(7);
				slNo	  = rs.getLong(8);	
				
			}

			for(int i=0;i<noOfGrps;i++)
			{

				if(fromWhere != null && fromWhere.equals("ETSAIRINVOICEID")  || fromWhere.equals("ETSSEAINVOICEID") ||   fromWhere.equals("ETSTRUCKINVOICEID")) 
				{
					if(valGrp[i] != null && valGrp[i].equals("SHIPPERNAME"))
					{
				
						if(shipperCompany != null && !shipperCompany.equals("null"))
						{
							if(shipperCompany.length() <= valLen[i])
								{valGrp[i] = (shipperCompany).substring(0,shipperCompany.length()); }
							else
								{ valGrp[i] = (shipperCompany).substring(0,valLen[i]); }
						}
						else 
						{
							if(codeCustDOB.companyId.length() <= valLen[i])
								{ valGrp[i] = (codeCustDOB.companyId).substring(0,codeCustDOB.companyId.length());}
							else
								{ valGrp[i] = (codeCustDOB.companyId).substring(0,valLen[i]);}
						}
					}
					else if(valGrp[i] != null && valGrp[i].equals("ORIGINLOCATION") ||   valGrp[i].equals("LOCATION"))
					{
          //System.out.println("OID session Bean lOCATION:"+codeCustDOB.originId);
						if(codeCustDOB.originId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length()); }
						else
							{ valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]); }

					}
					else if(valGrp[i] != null && valGrp[i].equals("DESTINATION") )
					{
						if(codeCustDOB.destinationId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.destinationId).substring(0,codeCustDOB.destinationId.length()); }
						else
							{ valGrp[i] = (codeCustDOB.destinationId).substring(0,valLen[i]); }

					}
					else if(valGrp[i] != null && valGrp[i].equals("COMPANY"))
					{
         // System.out.println("OID session Bean company:"+codeCustDOB.companyId);
						if(codeCustDOB.companyId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.companyId).substring(0,codeCustDOB.companyId.length()); }
						else
							{ valGrp[i] = (codeCustDOB.companyId).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && !(valGrp[i].equals("SHIPPERNAME")) && !(valGrp[i].equals("ORIGIN")) && !(valGrp[i].equals("COMPANY")) && !(valGrp[i].equals("LOCATION")))
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length()); }
						else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }
              
				}
				if(fromWhere != null && fromWhere.equals("ETSCUSTOMERID") || fromWhere.equals("ETSVENDORID") || fromWhere.equals("CUSTOMER")) 
				{

					if(valGrp[i] != null && valGrp[i].equals("COMPANY") || valGrp[i].equals("COMPANYID"))
					{

						if(codeCustDOB.companyId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.companyId.substring(0,codeCustDOB.companyId.length())); }
						  else
							{ valGrp[i] = (codeCustDOB.companyId.substring(0,valLen[i])); }

					}
					else if(valGrp[i] != null && valGrp[i].equals("LOCATION"))
					{ 
         // System.out.println("OID222222 session Bean company:"+codeCustDOB.locationId);
          
						   if(codeCustDOB.locationId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.locationId).substring(0,codeCustDOB.locationId.length());}
						  else
							{ valGrp[i] = (codeCustDOB.locationId).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && !(valGrp[i].equals("COMPANY")) && !(valGrp[i].equals("LOCATION")) && !(valGrp[i].equals("COMPANYID")))
					{
 //System.out.println("OID33333333333 session Bean company:"+codeCustDOB.locationId);

						if(valGrp[i].length() <= valLen[i])
							 { valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());}
						  else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

					}
				}
				if(fromWhere != null && fromWhere.equals("ETSCARRIERCONTRACTID")) 
				{
					if(valGrp[i] != null && valGrp[i].equals("ORIGIN"))
					{
						if(codeCustDOB.originId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.originId.trim()).substring(0,codeCustDOB.originId.length());}
						else
							{ valGrp[i] = (codeCustDOB.originId.trim()).substring(0,valLen[i]); }

					}
					if(valGrp[i] != null && valGrp[i].equals("DESTINATION"))
					{
							if(codeCustDOB.destinationId.length() <= valLen[i])
								{ valGrp[i] = (codeCustDOB.destinationId.trim()).substring(0,codeCustDOB.destinationId.length()); }
							else
								{valGrp[i] = (codeCustDOB.destinationId.trim()).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("CARRIER"))
					{
						if(codeCustDOB.carrierId.length() <= valLen[i])
						{	valGrp[i] = (codeCustDOB.carrierId.trim()).substring(0,codeCustDOB.carrierId.length());}
						else
							{ valGrp[i] = (codeCustDOB.carrierId.trim()).substring(0,valLen[i]);}

					}
					else if(valGrp[i] != null && !(valGrp[i].equals("DESTINATION")) && !(valGrp[i].equals("ORIGIN")) && !(valGrp[i].equals("CARRIER")))
					{
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i].trim()).substring(0,valGrp[i].length()); }
						else
							{ valGrp[i] = (valGrp[i].trim()).substring(0,valLen[i]);}

					}
				}
				else if(fromWhere != null && fromWhere.equals("ETSTRIPSHEETID")) 
				{

					if(valGrp[i] != null && valGrp[i].equals("ORIGIN"))
					{
						if(codeCustDOB.originId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length());}
						else
							{ valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]); }

					}
					if(valGrp[i] != null && valGrp[i].equals("DESTINATION"))
					{
							if(codeCustDOB.destinationId.length() <= valLen[i])
								{ valGrp[i] = (codeCustDOB.destinationId).substring(0,codeCustDOB.destinationId.length()); }
							else
								{ valGrp[i] = (codeCustDOB.destinationId).substring(0,valLen[i]); }

					}
					else if(valGrp[i] != null && valGrp[i].equals("COMPANY"))
					{
						if(codeCustDOB.companyId.length() <= valLen[i])
						{	valGrp[i] = (codeCustDOB.companyId).substring(0,codeCustDOB.companyId.length());}
						else
							{ valGrp[i] = (codeCustDOB.companyId).substring(0,valLen[i]);}

					}
					else if(valGrp[i] != null && !(valGrp[i].equals("DESTINATION")) && !(valGrp[i].equals("ORIGIN")) && !(valGrp[i].equals("VEHICLEID")))
					{
							if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length()); }
						else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }
					}
				}
				else if(fromWhere != null && fromWhere.equals("ETSMANIFESTID")) 
				{

					if(valGrp[i] != null && valGrp[i].equals("MANIFESTTYPE"))
					{
						if(codeCustDOB.manifestType.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.manifestType).substring(0,codeCustDOB.manifestType.length()); }
						else
							{ valGrp[i] = (codeCustDOB.manifestType).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("ORIGIN"))
					{
						if(codeCustDOB.originId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length()); }
						else
							{ valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]); }

					}
					else if(valGrp[i] != null && !(valGrp[i].equals("MANIFESTTYPE")) && !(valGrp[i].equals("ORIGIN")))
					{
							if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length()); }
							else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

					}	

				}
				else if(fromWhere != null && fromWhere.equals("ETSROUTEID") ) 
				{
						if(valGrp[i] != null && valGrp[i].equals("ORIGINLOCATION") )
						{
							if(codeCustDOB.originId.length() <= valLen[i])
								{ valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length()); }
							else
								{ valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]); }

						}
						else if(valGrp[i] != null && valGrp[i].equals("DESTLOCATION"))
						{
							if(codeCustDOB.destinationId.length() <= valLen[i])
								{ valGrp[i] = (codeCustDOB.destinationId).substring(0,codeCustDOB.destinationId.length());}
							else
								{ valGrp[i] = (codeCustDOB.destinationId).substring(0,valLen[i]); }

						}
						else if(valGrp[i] != null && !(valGrp[i].equals("ORIGINLOCATION")) && !(valGrp[i].equals("DESTLOCATION")))
						{
								if(valGrp[i].length() <= valLen[i])
								{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length()); }
								else
								{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

						}	
				}
				else if(fromWhere != null && fromWhere.equals("ETSCONSOLEID")) 
				{

					if(valGrp[i] != null && valGrp[i].equals("CONSOLETYPE"))
					{
						if(codeCustDOB.consolType.length() <= valLen[i])
						{ 	valGrp[i] = (codeCustDOB.consolType).substring(0,codeCustDOB.consolType.length()); }
						else
							{ valGrp[i] = (codeCustDOB.consolType).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("PORTOFLOADING"))
					{
						if(codeCustDOB.portOfLoading.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.portOfLoading).substring(0,codeCustDOB.portOfLoading.length()); }
						else
							{ valGrp[i] = (codeCustDOB.portOfLoading).substring(0,valLen[i]); }


					}
					if(valGrp[i] != null && valGrp[i].equals("PORTOFDISCHARGE"))
					{
						if(codeCustDOB.portOfDischarge.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.portOfDischarge).substring(0,codeCustDOB.portOfDischarge.length());}
						else
							{ valGrp[i] = (codeCustDOB.portOfDischarge).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("LOCATION"))
					{
						   if(codeCustDOB.locationId.length() <= valLen[i])
						{	valGrp[i] = (codeCustDOB.locationId).substring(0,codeCustDOB.locationId.length());}
						  else
							{ valGrp[i] = (codeCustDOB.locationId).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && !(valGrp[i].equals("PORTOFLOADING")) && !(valGrp[i].equals("CONSOLETYPE")) && !(valGrp[i].equals("PORTOFDISCHARGE")) && !(valGrp[i].equals("LOCATION")) && !(valGrp[i].equals("ORIGINLOCATION")) && !(valGrp[i].equals("DESTLOCATION")) && !(valGrp[i].equals(codeCustDOB.portOfLoading)))
					{

						 if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());}
						  else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

					}

				}
				else if(fromWhere != null && fromWhere.equals("ETSPRSID") || fromWhere.equals("ETSDRSID"))
				{

					if(valGrp[i] != null && valGrp[i].equals("TRUCKID"))
						if(codeCustDOB.truckId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.truckId).substring(0,codeCustDOB.truckId.length()); }
						else
							{ valGrp[i] = (codeCustDOB.truckId).substring(0,valLen[i]); }
              
           
						
						else if(valGrp[i] != null && valGrp[i].equals("DAY"))
						if(strDay.length() <= valLen[i])
							{ valGrp[i] = (strDay.trim()).substring(0,strDay.length());}
						else
					  {		valGrp[i] = (strDay.trim()).substring(0,valLen[i]);}
              
					else if(valGrp[i] != null && valGrp[i].equals("MONTH"))
						if(strMonth.length() <= valLen[i])
							{ valGrp[i] = (strMonth.trim()).substring(0,strMonth.length());}
						else
						{	valGrp[i] = (strMonth.trim()).substring(0,valLen[i]);}
              
					else if(valGrp[i] != null && !(valGrp[i].equals("TRUCKID")) && !(valGrp[i].equals("DAY")) && !(valGrp[i].equals("MONTH")))
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i].trim()).substring(0,valGrp[i].length());}
						else
						{	valGrp[i] = (valGrp[i].trim()).substring(0,valLen[i]);}

				}
				if(fromWhere != null && fromWhere.equals("ETSPOMSID") || fromWhere.equals("ETSIMSID"))
				{

					if(valGrp[i] != null && valGrp[i].equals("CONSIGNEE"))
					{
						   if(codeCustDOB.consigneeName.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.consigneeName).substring(0,codeCustDOB.consigneeName.length());}
						  else
							{ valGrp[i] = (codeCustDOB.consigneeName).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("SHIPPER"))
					{
						   if(codeCustDOB.shipperName.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.shipperName).substring(0,codeCustDOB.shipperName.length());}
						  else
							{ valGrp[i] = (codeCustDOB.shipperName).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("ORIGINLOCATION"))
					{
						   if(codeCustDOB.originId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length());} 
						  else
							{ valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]); }

					}
					else if(valGrp[i] != null && valGrp[i].equals("DESTLOCATION"))
					{
						   if(codeCustDOB.destinationId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.destinationId).substring(0,codeCustDOB.destinationId.length());} 
						  else
							{ valGrp[i] = (codeCustDOB.destinationId).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && !(valGrp[i].equals("CONSIGNEE")) && !(valGrp[i].equals("DESTLOCATION")) && !(valGrp[i].equals("SHIPPER")) && !(valGrp[i].equals("ORIGINLOCATION")))
					{
							//valGrp[i] = (valGrp[i]).substring(0,valLen[i]);
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());}
						  else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }
					}

				}
				else if(fromWhere != null && fromWhere.equals("ETSWAREHOUSEID"))
				{

					if(valGrp[i] != null && valGrp[i].equals("TERMINALID"))
					{
						if(codeCustDOB.terminalId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.terminalId).substring(0,codeCustDOB.terminalId.length());} 
						else
							{ valGrp[i] = (codeCustDOB.terminalId).substring(0,valLen[i]); }
              
					}
					else if(valGrp[i] != null && valGrp[i].equals("DAY"))
					{
							if(strDay.length() <= valLen[i])
								{ valGrp[i] = (strDay).substring(0,strDay.length()); }
							else
								{ valGrp[i] = (strDay).substring(0,valLen[i]); }
                

					}
					else if(valGrp[i] != null && valGrp[i].equals("MONTH"))
					{
						if(strMonth.length() <= valLen[i])
							{ valGrp[i] = (strMonth).substring(0,strMonth.length()); }
						else
							{ valGrp[i] = (strMonth).substring(0,valLen[i]); }

					}
					else if(valGrp[i] != null && !(valGrp[i].equals("TERMINALID")) && !(valGrp[i].equals("DAY")) && !(valGrp[i].equals("MONTH")))
					{
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());}
						else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

					}

				}
				else if(fromWhere != null && fromWhere.equals("ETSCUSTOMERCONTRACTID"))
				{

					if(valGrp[i] != null && valGrp[i].equals("COMPANYID"))
					{
						if(codeCustDOB.companyId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.companyId).substring(0,codeCustDOB.companyId.length());}
						else
							{ valGrp[i] = (codeCustDOB.companyId).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("FREIGHTCOMPANY"))
					{
							if(shipperCompany != null ) 
							{
                              if (shipperCompany.equals("null")) 
								{  
								valGrp[i] = "";
								}
    						   else if((!(shipperCompany.equals("null")) && shipperCompany.length() <= valLen[i]))
							   {
								valGrp[i] = (shipperCompany).substring(0,shipperCompany.length());
							   }
    							else if(shipperCompany !=null && (!(shipperCompany.equals("null"))))
	    						{
									valGrp[i] = (shipperCompany).substring(0,valLen[i]);	
							    }

							}
							else{
								valGrp[i] = "";
                            }

					}	
					else if(valGrp[i] != null && !(valGrp[i].equals("COMPANYID")) && !(valGrp[i].equals("FREIGHTCOMPANY")))
					{
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());} 
						else
						{	valGrp[i] = (valGrp[i]).substring(0,valLen[i]);}
					}

				}
				else if(fromWhere != null && fromWhere.equals("ETSVENDORCONTRACTID"))
				{
					if(valGrp[i] != null && valGrp[i].equals("VENDORID"))
					{

						if(codeCustDOB.vendorId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.vendorId).substring(0,codeCustDOB.vendorId.length());}
						else
							{ valGrp[i] = (codeCustDOB.vendorId).substring(0,valLen[i]);}
              
					}
					else if(valGrp[i] != null && valGrp[i].equals("ORIGIN"))
					{
						 if(codeCustDOB.originId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length());}
						  else
							{ valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && valGrp[i].equals("COMPANYID"))
					{
					if(codeCustDOB.companyId.length() <= valLen[i])
						{ valGrp[i] = (codeCustDOB.companyId).substring(0,codeCustDOB.companyId.length());} 
					  else
						{ valGrp[i] = (codeCustDOB.companyId).substring(0,valLen[i]); }
					}
					else if(valGrp[i] != null && !(valGrp[i].equals("VENDORID")) && !(valGrp[i].equals("ORIGIN")) && !(valGrp[i].equals("COMPANYID")))
					{
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());}
						else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }
//Logger.info(FILE_NAME,"valGrp[i] 222:	"+valGrp[i]);
					}

				}
				if(fromWhere != null && fromWhere.equals("ETSAIRDELIVERYORDERID") || fromWhere.equals("ETSSEADELIVERYORDERID") ||  fromWhere.equals("ETSTRUCKDELIVERYORDERID"))
				{

					if(valGrp[i] != null && valGrp[i].equals("DESTLOCATION"))
					{
						if(codeCustDOB.destinationId.length() <= valLen[i])
						{ 	valGrp[i] = (codeCustDOB.destinationId).substring(0,codeCustDOB.destinationId.length());}
						else
							{ valGrp[i] = (codeCustDOB.destinationId).substring(0,valLen[i]); }

//Logger.info(FILE_NAME,"valGrp[i] 333:	"+valGrp[i]);
					}
					else if(valGrp[i] != null && valGrp[i].equals("CONSIGNEE"))
					{
							if(consigneeCompany != null ) 
							{
                              if (consigneeCompany.equals("null")) 
								{  
								valGrp[i] = "";
								}
    						   else if((!(consigneeCompany.equals("null")) && consigneeCompany.length() <= valLen[i]))
							   {
								valGrp[i] = (consigneeCompany).substring(0,consigneeCompany.length());
							   }
    							else if(consigneeCompany !=null && (!(consigneeCompany.equals("null"))))
	    						{
									valGrp[i] = (consigneeCompany).substring(0,valLen[i]);	
							    }

							}
							else{
								valGrp[i] = "";
                            }
//Logger.info(FILE_NAME,"valGrp[i] 444:	"+valGrp[i]);

					}
					else if(valGrp[i] != null && valGrp[i].equals("MONTHYEAR"))
					{
						if(monthYear.length() <= valLen[i])
						{	valGrp[i] = (monthYear).substring(0,monthYear.length());}
						else
							{valGrp[i] = (monthYear).substring(0,valLen[i]);}
					}
					else if(valGrp[i] != null && !(valGrp[i].equals("DESTLOCATION")) && !(valGrp[i].equals("CONSIGNEE")) && !(valGrp[i].equals("MONTHYEAR")))
					{
						if(valGrp[i].length() <= valLen[i])
							{valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());}
						else
							{valGrp[i] = (valGrp[i]).substring(0,valLen[i]);}
					}

				}
				else if(fromWhere != null && fromWhere.equals("ETCONSIGNEMENTID") || fromWhere.equals("ETSAIRPRQID") || fromWhere.equals("ETSSEAPRQID") || fromWhere.equals("ETSTRUCKPRQID") || fromWhere.equals("ETSHOUSEDOCUMENTID") ||  fromWhere.equals("ETSHBLID") || fromWhere.equals("ETSCONSIGNEMENTID")) 
				{

//Logger.info(FILE_NAME,"fromWhere 000:	"+fromWhere);
//Logger.info(FILE_NAME,"valGrp[i] 000:	"+valGrp[i]);

					if(valGrp[i] != null && valGrp[i].equals("COMPANY"))
					{
						if(codeCustDOB.companyId.length() <= valLen[i])
						{	valGrp[i] = (codeCustDOB.companyId).substring(0,codeCustDOB.companyId.length());}
						else
							{valGrp[i] = (codeCustDOB.companyId).substring(0,valLen[i]);}

					}
					else if(valGrp[i] != null && valGrp[i].equals("SHIPMENTMODE"))
					{
						if(sMode.length() <= valLen[i])
							{valGrp[i] = (sMode).substring(0,sMode.length());}
						else
							{valGrp[i] = (sMode).substring(0,valLen[i]);}

					}
					else if(valGrp[i] != null && valGrp[i].equals("ORIGIN") || valGrp[i].equals("LOCATION"))
					{
						if(codeCustDOB.originId.length() <= valLen[i])
						{	valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length());}
						else
							{valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]);}


					}
					else if(valGrp[i] != null && valGrp[i].equals("DESTINATION"))
					{

						if(codeCustDOB.destinationId.length() <= valLen[i])
						{	valGrp[i] = (codeCustDOB.destinationId).substring(0,codeCustDOB.destinationId.length());}
						else
							{valGrp[i] = (codeCustDOB.destinationId).substring(0,valLen[i]);}
					}
					else if(valGrp[i] != null && valGrp[i].equals("SHIPPERNAME"))
					{
						if(shipperCompany.length() <= valLen[i])
							{valGrp[i] = (shipperCompany).substring(0,shipperCompany.length()); }
						else
							{ valGrp[i] = (shipperCompany).substring(0,valLen[i]);}
//Logger.info(FILE_NAME,"valGrp[i] 444:	"+valGrp[i]);
					}
          else if(valGrp[i] != null && valGrp[i].equals("SHIPPER"))
					{
						if(shipperCompany.length() <= valLen[i])
							{ valGrp[i] = (shipperCompany).substring(0,shipperCompany.length());}
						else
							{ valGrp[i] = (shipperCompany).substring(0,valLen[i]); }
//Logger.info(FILE_NAME,"valGrp[i] 555:	"+valGrp[i]);
					}
					else if(valGrp[i] != null && valGrp[i].equals("CONSIGNEE"))
					{
						if(consigneeCompany.length() <= valLen[i])
							{ valGrp[i] = (consigneeCompany).substring(0,consigneeCompany.length());}
						else
							{ valGrp[i] = (consigneeCompany).substring(0,valLen[i]); }
//Logger.info(FILE_NAME,"valGrp[i] 666:	"+valGrp[i]);

					}
					else if(valGrp[i] != null && !(valGrp[i].equals("SHIPMENTMODE")) && !(valGrp[i].equals("ORIGIN")) && !(valGrp[i].equals("DESTINATION"))  && !(valGrp[i].equals("SHIPPERNAME")) && !(valGrp[i].equals("COMPANY")) && !(valGrp[i].equals("CONSIGNEE")) && !(valGrp[i].equals("SHIPPER")))
					{
						if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length()); }
						else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

//Logger.info(FILE_NAME,"valGrp[i] 777:	"+valGrp[i]);
					}
				}
				else if(fromWhere != null && fromWhere.equals("ETSPRSID") || fromWhere.equals("ETSDRSID")) 
				{
//Logger.info(FILE_NAME,"fromWhere 000:	"+fromWhere);
//Logger.info(FILE_NAME,"valGrp[i] 000:	"+valGrp[i]);


					if(valGrp[i] != null && valGrp[i].equals("TRUCKID"))
						//valGrp[i] = (codeCustDOB.truckId).substring(0,valLen[i]);
						if(strDay.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.truckId).substring(0,codeCustDOB.truckId.length());}
						else
							{ valGrp[i] = (codeCustDOB.truckId).substring(0,valLen[i]); }

					else if(valGrp[i] != null && valGrp[i].equals("DAY"))
						if(strDay.length() <= valLen[i])
						{	valGrp[i] = (strDay).substring(0,strDay.length());}
						else
							{ valGrp[i] = (strDay).substring(0,valLen[i]); }
					else if(valGrp[i] != null && valGrp[i].equals("MONTH"))
						if(strMonth.length() <= valLen[i])
							{ valGrp[i] = (strMonth).substring(0,strMonth.length());} 
						else
							{ valGrp[i] = (strMonth).substring(0,valLen[i]); }
					else if(valGrp[i] != null && !(valGrp[i].equals("TRUCKID")) && !(valGrp[i].equals("DAY")) && !(valGrp[i].equals("MONTH")))
							//valGrp[i] = (valGrp[i]).substring(0,valLen[i]);
					if(valGrp[i].length() <= valLen[i])
							{ valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());} 
						else
							{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

				}
				/*else if(fromWhere != null && fromWhere.equals("ETSRFQID")) 
				{
Logger.info(FILE_NAME,"fromWhere 000:	"+fromWhere);
Logger.info(FILE_NAME,"valGrp[i] 000:	"+valGrp[i]);


					if(valGrp[i] != null && valGrp[i].equals("CUSTOMER"))
					{
						 if(codeCustDOB.customerId.length() <= valLen[i])
							valGrp[i] = (codeCustDOB.customerId).substring(0,codeCustDOB.customerId.length());
						 else
							valGrp[i] = (codeCustDOB.customerId).substring(0,valLen[i]);

Logger.info(FILE_NAME,"valGrp[i] 000:	"+valGrp[i]);
					}
					if(valGrp[i] != null && valGrp[i].equals("ORIGIN"))
					  {
						  if(codeCustDOB.originId.length() <= valLen[i])
								valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length());
						else
								valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]);

			Logger.info(FILE_NAME,"valGrp[i] 111:	"+valGrp[i]);
					  }
					else if(valGrp[i] != null && valGrp[i].equals("DESTINATION"))
					{
						if(codeCustDOB.destinationId.length() <= valLen[i])
							valGrp[i] = (codeCustDOB.destinationId).substring(0,codeCustDOB.destinationId.length());
						else
							valGrp[i] = (codeCustDOB.destinationId).substring(0,valLen[i]);
Logger.info(FILE_NAME,"valGrp[i] 222:	"+valGrp[i]);
					}
					else if(valGrp[i] != null && !(valGrp[i].equals("CUSTOMER")) && !(valGrp[i].equals("ORIGIN")) && !(valGrp[i].equals("DESTINATION")))
					{
						//valGrp[i] = (valGrp[i]).substring(0,valLen[i]);
						if(codeCustDOB.destinationId.length() <= valLen[i])
							valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length());
						else
							valGrp[i] = (valGrp[i]).substring(0,valLen[i]);
Logger.info(FILE_NAME,"valGrp[i] 333:	"+valGrp[i]);
					}

				}*/
				else if(fromWhere != null && fromWhere.equals("ETSCUSTOMERID")) 
				{

					if(valGrp[i] != null && valGrp[i].equals("COMPANY") || valGrp[i].equals("COMPANYID"))
					{
						if(codeCustDOB.companyId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.companyId).substring(0,codeCustDOB.companyId.length());} 
						else
							{ valGrp[i] = (codeCustDOB.companyId).substring(0,valLen[i]); }

					}
					else if(valGrp[i] != null && valGrp[i].trim().equals("LOCATION"))
					{
						 if(codeCustDOB.locationId.length() <= valLen[i])
							{ valGrp[i] = (codeCustDOB.locationId).substring(0,codeCustDOB.locationId.length()); }
						 else
							{ valGrp[i] = (codeCustDOB.locationId).substring(0,valLen[i]);} 
					}
					if(valGrp[i] != null && !(valGrp[i].equals("COMPANY")) && !(valGrp[i].equals("LOCATION")) && !(valGrp[i].equals("COMPANYID")))
					{
						if(valGrp[i].length() <= valLen[i])
							{valGrp[i] = (valGrp[i]).substring(0,valGrp[i].length()); }
						else
							{valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }
					}
				}
				else if(fromWhere != null && fromWhere.equals("ETSCARRIERSCHEDULEID")) 
				{

					  if(valGrp[i] != null && valGrp[i].equals("ORIGIN"))
					  {
									if(codeCustDOB.originId.length() <= valLen[i])
										{ valGrp[i] = (codeCustDOB.originId).substring(0,codeCustDOB.originId.length());}
									else
										{ valGrp[i] = (codeCustDOB.originId).substring(0,valLen[i]);}

			//Logger.info(FILE_NAME,"valGrp[i] 111:	"+valGrp[i]);
					  }
					  else if(valGrp[i] != null && valGrp[i].equals("DAY"))
					  {
									if(strDay.length() <= valLen[i])
										{ valGrp[i] = (strDay).substring(0,strDay.length());}
									else
										{ valGrp[i] = (strDay).substring(0,valLen[i]);} 

			//Logger.info(FILE_NAME,"valGrp[i] 222:	"+valGrp[i]);
					  
					  }
					  else if(valGrp[i] != null && valGrp[i].equals("MONTH"))
					  {
									if(strMonth.length() <= valLen[i])
										{ valGrp[i] = (strMonth).substring(0,strMonth.length());}
									else
										{ valGrp[i] = (strMonth).substring(0,valLen[i]);}

		//	Logger.info(FILE_NAME,"valGrp[i] 333:	"+valGrp[i]);
					  }
					  else if(valGrp[i] != null && !(valGrp[i].equals("ORIGIN")) && !(valGrp[i].equals("DAY")) && !(valGrp[i].equals("MONTH"))  )
					  {          
										{ valGrp[i] = (valGrp[i]).substring(0,valLen[i]); }

			//Logger.info(FILE_NAME,"valGrp[i] 444:	"+valGrp[i]);
					  }
				}
			}
			

			//int oid = generateOID( connection, fromWhere ); I am commenting this becoz it is retrieved from configparam
//			String strOid = (new Integer(oid)).toString();
//Logger.info(FILE_NAME,"valGrp[0]:	"+valGrp[0]);
//Logger.info(FILE_NAME,"valGrp[1]:	"+valGrp[1]);
//Logger.info(FILE_NAME,"valGrp[2]:	"+valGrp[2]);
			
    		String	strOid	= valGrp[0]+valGrp[1]+valGrp[2]+slNo;	
      
			if(strOid != null && !(strOid.equals("nullnullnull0")))
			{
					if(valGrp[0] == null || (valGrp[0] != null && valGrp[0].equals("null")))
							{ valGrp[0] = "";}
			        if(valGrp[1] == null || (valGrp[1] != null && valGrp[1].equals("null")))
							{valGrp[1] = ""; }
					if(valGrp[2] == null || (valGrp[2] != null && valGrp[2].equals("null"))){
							 { valGrp[2] = "";}
          
          if(slNo < 10)
              strOid	= valGrp[0]+valGrp[1]+valGrp[2]+"00"+slNo;
          else if(slNo >= 10 && slNo < 100)
              strOid	= valGrp[0]+valGrp[1]+valGrp[2]+"0"+slNo;
          else
              strOid	= valGrp[0]+valGrp[1]+valGrp[2]+slNo;
          
          //Logger.info(FILE_NAME,"StrOid 000:	"+strOid);
					}
				return strOid;
			}
			else
			{
				//Logger.info(FILE_NAME,"StrOid 111:	"+strOid);
				throw new CodeCustNotDoneException("Code Customization not done for "+fromWhere);
			}
		}
		catch( SQLException sqlEx )
		{
			sqlEx.printStackTrace();
			//Logger.error(FILE_NAME,"SQLException is : "+sqlEx);
      logger.error(FILE_NAME+"SQLException is : "+sqlEx);
			return null;
		}
		finally
		{
			try
			{
				ConnectionUtil.closeConnection(connection, stmt, rs);	
        ConnectionUtil.closeConnection(null, stmt1,null);
			}
			catch( Exception e )
			{
	 			 e.printStackTrace();
				 //Logger.error(FILE_NAME,"getCodeCustomisationId Exception is : "+e);
         logger.error(FILE_NAME+"getCodeCustomisationId Exception is : "+e);
				 return null;
			}
		}
	}








  /**
   * 
   * @param terminalId
   * @param carrierId
   * @return masterdocId
   */
	public String getMasterdocOID( String terminalId, String carrierId )
	{
		Connection  connection   = null;
		Statement stmt = null;
		PreparedStatement pstmt = null;
		ResultSet rs   = null;
		try
		{
			connection = getConnection();
			stmt = connection.createStatement();
			String sql = "SELECT COUNT(*) NO_ROWS FROM FS_FR_MASTERDOCREG "+
						"WHERE TERMINALID='"+ terminalId +"' AND CARRIERID='"+carrierId+"' AND STATUS='NA'";
			String sql1 = "SELECT SNO, TERMINALID, CARRIERID, STATUS FROM FS_FR_MASTERDOCREG "+
						"GROUP BY SNO, TERMINALID, CARRIERID ,STATUS "+
						"HAVING TERMINALID='"+ terminalId +"' AND CARRIERID='"+carrierId+"' AND STATUS='NA' ORDER BY SNO";
			rs = stmt.executeQuery(sql);
			rs.next();
			int cnt = rs.getInt("NO_ROWS");
			if( cnt==0 )
				{return null;}
			rs = stmt.executeQuery(sql1);
			rs.next();
			int nMasterSNo = rs.getInt("SNO");
			String sql2 = "SELECT MIN(MASTERDOCID) MDOCID FROM FS_FR_MASTERDOCREG "+
						  "WHERE SNO="+ nMasterSNo +" AND TERMINALID='"+ terminalId +"' AND CARRIERID='"+carrierId+"' AND STATUS='NA'";
			rs = stmt.executeQuery( sql2 );
			rs.next();
			String masterdocId = rs.getString("MDOCID");
			Date d = new Date();
			java.sql.Timestamp docUsedDate = new java.sql.Timestamp( d.getTime() );
			String sql3 = "UPDATE FS_FR_MASTERDOCREG SET DOCUSED=?, STATUS=? WHERE SNO=? AND MASTERDOCID=? AND TERMINALID=? AND CARRIERID=?";
			pstmt = connection.prepareStatement( sql3 );
			pstmt.setTimestamp( 1, docUsedDate );
			pstmt.setString(2,"A");
			pstmt.setInt(3,nMasterSNo);
			pstmt.setString(4,masterdocId);
			pstmt.setString(5,terminalId);
			pstmt.setString(6,carrierId);
			pstmt.executeUpdate();
			return  masterdocId;
		}
		catch( SQLException e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return null;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return null;
		}
		finally
		{
			try
			{
				if(rs !=null)
				{	rs.close();}
				if( stmt != null )
					{ stmt.close();}
				if( pstmt != null )
					{pstmt.close();}
				if(connection != null )
				{connection.close();}
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return null;
			}
		}
	}
	  /* For getting shipment plan id*/
  /**
   * 
   * @return oid
   */
 public long getShpmntPlanId() 
	{
		Connection  connection   = null;
    long oid = 0L;
		try
		{
			connection = getConnection();
			 oid = generateOID( connection, "SHIPMENTPLAN" );
			return oid;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return 0;
		}
		finally
		{
			try
			{
				if(connection != null )
				{ connection.close();}
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return 0;
			}
		}
	} 
	// subroutines
	private String getYear() 
	{
		try
		{
			Calendar rightNow = Calendar.getInstance();
			int year = rightNow.get(Calendar.YEAR);
			String strYear = (new Integer(year)).toString();
			strYear = strYear.substring( strYear.length()-1 );
			return strYear;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return null;
		}
	}
    
     public long getZoneCodeId() 
	{
		Connection  connection   = null;
    long oid = 0L;
		try
		{
			connection = getConnection();
			 oid = generateOID( connection, "ZONECODE" );
			return oid;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return 0;
		}
		finally
		{
			try
			{
				if(connection != null )
				{ connection.close();}
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return 0;
			}
		}
	} 
    public String getCustomerOID( String terminalId, String custAbbvName) 
	{
		Connection  connection   = null;
		try
		{
			//to get Terminal location
			String strTerminalId = terminalId.substring(3);
			//to get Customer Abb. Name
			String strCustAbbvName = custAbbvName;
			//to get running serial no
			connection = getConnection();
			int oid = generateOID( connection, "CUSTOMER" );
			String strOid = (new Integer(oid)).toString();
			return (strCustAbbvName+strTerminalId+strOid);
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return null;
		}
		finally
		{
			try
			{
				if(connection != null )
				connection.close();
			}
			catch( SQLException e )
			{
				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
				  return null;
			}
		}
	}
	private int  generateOID( Connection connection, String strRefCode )
	{
		Statement stmt = null;
		ResultSet rs   = null;
		try
		{
			stmt = connection.createStatement();
			//@@ 20050224 SEQUENCE IMPLEMENTATION
			//stmt.executeUpdate("UPDATE FS_FR_OID SET SNO = SNO+1 WHERE REFCODE='"+strRefCode+"'");
			//rs = stmt.executeQuery("SELECT SNO FROM FS_FR_OID WHERE REFCODE='"+strRefCode+"'");
			rs = stmt.executeQuery("SELECT "+strRefCode+"_SEQ.NEXTVAL  FROM DUAL");
			//@@ 20050224
			rs.next();
			return  rs.getInt(1);
		}
		catch( SQLException e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return 0;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return 0;
		}
		finally
		{
			try
			{
				if(rs !=null){ rs.close();}
				if( stmt != null ){ stmt.close();}
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return 0;
			}
		}
	} // end GenerateOID()
	// Method for Preventive maintenence IDs  ends here
	// Method for Project Master starts Here
	// Author : Rahul
  /**
   * 
   * @param terminalId
   * @param custAbbvName
   * @return 
   */
	public String getProjectOID( String terminalId, String custAbbvName) 
	{
		Connection  connection   = null;
		String strTerminalId     =  null;
		try
		{
			//to get Terminal location
			if( terminalId.length()==6 )
				{ strTerminalId = terminalId.substring(3); }
			else if( terminalId.length()==4 )
				{ strTerminalId	= terminalId.substring(0,3); }
			else if( terminalId.length()==7 )
				{ strTerminalId	= terminalId.substring(0,3); }
			//to get Customer Abb. Name
			String strCustAbbvName = custAbbvName;
			//to get running serial no
			connection = getConnection();
			int oid = generateOID( connection, "PROJECTMASTER" );
			String strOid = (new Integer(oid)).toString();
			return (strTerminalId+strCustAbbvName+strOid);
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is getProjectOID() : "+e);
      logger.error(FILE_NAME+"Exception is getProjectOID() : "+e);
			return null;
		}
		finally
		{
			try
			{
				if(connection != null )
					{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"getProjectOID() : "+e);
        logger.error(FILE_NAME+"getProjectOID() : "+e);
				return null;
			}
		}
	}//END OF METHOD getProjectID

	// Method for Project Master ends Here

	//##################################Method is placed for subagent ################################3
    
  /**
   * 
   * @return strOid
   * @throws javax.ejb.EJBException
   */
	public String getSubAgentOID()  
	{
		Connection  connection   = null;
		try
		{
			connection = getConnection();
			int oid = generateOID( connection, "SUBAGENT" );
			String strOid = (new Integer(oid)).toString();

			return strOid;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			throw new EJBException("getSubAgentOID:Exception::..."+e.toString());
		}
		finally
		{
			try
			{

				if(connection != null )
				{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				throw new EJBException( "getSubAgentOID::finally::..."+e.toString() );
			}
		}
	}


	//################################# end  of method placed for subagent ##########################

	private int getCheckDigit( int oid )
	{
		return (oid % 7);
	}

	// Added by Ratan for Tyre Master setup starts here
	
	// Added by ratan for tyre master setup end here
	// Added by Raghu G starts here
	// Author : Raghu G
  /**
   * 
   * @return strOid
   */
	public String getLocationOID()
	{
		Connection  connection   = null;
		try
		{
			//to get running serial no
			connection = getConnection();
			int oid = generateOID( connection, "LOCATION" );
			String strOid = (new Integer(oid)).toString();
			return (strOid);
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
			return null;
		}
		finally
		{
			try
			{
				if(connection != null )
				{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				return null;
			}
		}
	}
	private void createDataSource()
	{
		try
		{
			initialContext = new InitialContext();
			dataSource = (DataSource)initialContext.lookup("java:comp/env/jdbc/DB");
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
		}
	}
	private Connection getConnection()throws SQLException 
	{
		Connection con = null;
		con = dataSource.getConnection();
		return con;
	}

	// Method getCustomerContractOID added by Durga for Sea Frieght .
	//It'll return String i.e. generated Cutomer Contract Id .
	// Which constitute first 3 letters terminal Id,next 3 letters Project Id and the remaining are 
	// running serial no. of CutContract in Fs_Fr_OID.
	  	


  /**
   * 
   * @return string variable
   * @throws javax.ejb.EJBException
   */
	public String getTrailerOID()   
	{
        Connection  connection   = null;
        try
        {
           //to get Year
           String year = getYear();
           //to get running serial no
           connection = getConnection();
           int oid = generateOID( connection, "TRAILER" );
           String strOid = (new Integer(oid)).toString();
           //to get Check digit
           int checkDigit = getCheckDigit( oid );
           String strCheckDigit = (new Integer(checkDigit)).toString();

           return (year+strOid+strCheckDigit);
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
	        throw new EJBException("getTrailerOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{

               if(connection != null )
    			 {connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				throw new EJBException( "getPRQOID::finally::..."+e.toString() );
			}
   		}
	}
  /**
   * 
   * @param manufactureName
   * @return string
   * @throws javax.ejb.EJBException
   */
	public String getManufactureOID( String manufactureName )
	{
        Connection  connection   = null;
        try
        {
           //to get Terminal location
           String strManufactureName = manufactureName.substring(0,2);

           //to get running serial no
           connection = getConnection();
           int oid = generateOID( connection, "MANUFACTURER" );
           String strOid = (new Integer(oid)).toString();

           return (strManufactureName+strOid);
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
 		    throw new EJBException("getManufactureOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{

               if(connection != null )
    			{ connection.close(); } 
			}
			catch( SQLException e )
			{
 				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
				 throw new EJBException( "getManufactureOID::finally::..."+e.toString() );
			}
   		}
	}
  /**
   * 
   * @param modelName
   * @return 
   * @throws javax.ejb.EJBException
   */
	public String getModelOID( String modelName )
	{
        Connection  connection   = null;
        try
        {
           //to get Terminal location
           String strModelName = modelName.substring(0,2);

           //to get running serial no
           connection = getConnection();
           int oid = generateOID( connection, "MODEL" );
           String strOid = (new Integer(oid)).toString();

           return (strModelName+strOid);
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
 		    throw new EJBException("getModelOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{

               if(connection != null )
    			{ connection.close(); }
			}
			catch( SQLException e )
			{
 				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
				 throw new EJBException( "getModelOID::finally::..."+e.toString() );
			}
   		}
	}
  /**
   * 
   * @return 
   * @throws javax.ejb.EJBException
   */
	public String getPartOID() 
	{
        Connection  connection   = null;
        try
        {


           //to get running serial no
           connection = getConnection();
           int oid = generateOID( connection, "PART" );
           String strOid = (new Integer(oid)).toString();

           return (strOid);
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
 		    throw new EJBException("getCustomerOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{

               if(connection != null )
    			{ connection.close(); }
			}
			catch( SQLException e )
			{
 				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
				 throw new EJBException( "getCustomerOID::finally::..."+e.toString() );
			}
   		}
	}
  /**
   * 
   * @return 
   * @throws javax.ejb.EJBException
   */
	public String getTruckTrailerInventoryIssueId() 
	{
		Connection connection =	null;
		try
			{
				connection		=	getConnection();
				int oid 		=	generateOID( connection, "INVENTORYISSUE" );
				String strOid = (new Integer(oid)).toString();
				return strOid;
			}
			catch( Exception e )
			{
				//Logger.error(FILE_NAME,"OIDSessionBean:Exception::getTruckTrailerInventoryIsssueId()::"+e.toString());
        logger.error(FILE_NAME+"OIDSessionBean:Exception::getTruckTrailerInventoryIsssueId()::"+e.toString());
				throw new EJBException("OIDSessionBean:getTruckTrailerInventoryIssueId()::"+e.toString());
			}
			finally
				{
				try
					{
					if(connection != null )
					{ connection.close();}
					}
					catch( SQLException e )
					{
					//Logger.error(FILE_NAME,"OIDSessionBean:getTruckTrailerInventoryIssueId():"+e);
          logger.error(FILE_NAME+"OIDSessionBean:getTruckTrailerInventoryIssueId():"+e);
					throw new EJBException( "OIDSessionBean:getTruckTrailerInventoryIssueId() :"+e.toString());
				}
		}//End of finally.
	}

	// Added by Sivaram 2 for Inventory Update starts here
  /**
   * 
   * @return 
   * @throws javax.ejb.EJBException
   */
	public String getInventoryOID()	
	{
		Connection	connection	 = null;
		try
		{
			connection = getConnection();
			int oid = generateOID( connection, "INVENTORY" );
			String strOid = (new	Integer(oid)).toString();
			return strOid;
		}
		catch( Exception e )
		{
			//Logger.error(FILE_NAME,"OIDSessionBean : getInventoryOID : "+e);
      logger.error(FILE_NAME+"OIDSessionBean : getInventoryOID : "+e);
			throw new EJBException(" OIDSessionBean : getInventoryOID : "+e.toString());
		}
		finally
		{
			try
			{
				if(connection !=	null )
					{ connection.close(); }
			}
			catch( SQLException	e )
			{
				//Logger.error(FILE_NAME,"OIDSessionBean : getInventoryOID : "+e);
        logger.error(FILE_NAME+"OIDSessionBean : getInventoryOID : "+e);
				throw new EJBException("OIDSessionBean : getInventoryOID : "+e.toString() );
			}
		}
	}
  /**
   * 
   * @param shortageOrDamage
   * @return 
   * @throws javax.ejb.EJBException
   */
	public String getDamageAndShortageOID( String shortageOrDamage )   
	{
        Connection  connection   = null;
        try
        {
           connection = getConnection();
           int oid = generateOID( connection, "SHORTAGEORDAMAGE" );
           String strOid = (new Integer(oid)).toString();
		
			
           return (shortageOrDamage+strOid);
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
 		    throw new EJBException("getDamageAndShortageOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{

               if(connection != null )
    			     { connection.close(); }
			}
			catch( SQLException e )
			{
 				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
				 throw new EJBException( "getDamageAndShortageOID::finally::..."+e.toString() );
			}
   		}
	}
	
	public String getVehicleOID() 
	{
		Connection connection=null;
		try
		{
			connection=getConnection();
			int oid=generateOID(connection,"VEHICLE");
			String strOid=(new Integer(oid)).toString();
			return strOid;
		}catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
	        throw new EJBException("getVehicleOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{
               if(connection != null )
    			{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				throw new EJBException( "getVehicleOID::finally::..."+e.toString() );
			}
   		}
	}

  /**
   * 
   * @return 
   * @throws javax.ejb.EJBException
   */
	public String getTyreMaintenenceOID()  
	{
        Connection  connection   = null;
        try
        {
           connection = getConnection();
           int oid = generateOID( connection, "TYREMNTC" );
	       String strOid = (new Integer(oid)).toString();
           return strOid;
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
	        throw new EJBException("getTyreMaintenenceOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{
               if(connection != null )
    			{ connection.close();}
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				throw new EJBException( "getTyreMaintenenceOID::finally::..."+e.toString() );
			}
   		}
	}
	//TyreMaintenenceIds Ends here

  /**
   * 
   * @return strOid
   * @throws javax.ejb.EJBException
   */
	public String getTruckTyreOID()  
	{
			Connection connection =	null;
		try
			{
				connection		=	getConnection();
				int oid 		=	generateOID( connection, "TYRE" );
				String strOid = (new Integer(oid)).toString();
				return strOid;
			}
			catch( Exception e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				throw new EJBException("getTruckTyreId:Exception::..."+e.toString());
			}
			finally
				{
				try
					{
					if(connection != null )
					{ connection.close();}
					}
					catch( SQLException e )
					{
					//Logger.error(FILE_NAME,"Exception is : "+e);
          logger.error(FILE_NAME+"Exception is : "+e);
					throw new EJBException( "getTyreId::finally::..."+e.toString());
				}
		}//End of finally.
	}

  /**
   * 
   * @param sessionCtx
   * @throws javax.ejb.EJBException
   */
	public void setSessionContext(SessionContext sessionCtx)
		throws javax.ejb.EJBException
	{
		this.sessionContext = sessionCtx;
		createDataSource();
	}
  /**
   * 
   * @throws javax.ejb.EJBException
   */
	public void ejbRemove()
		throws javax.ejb.EJBException
	{
    operationsImpl=null;
	}
  /**
   * 
   * @throws javax.ejb.EJBException
   */
	public void ejbActivate()
		throws javax.ejb.EJBException
	{
	}
  /**
   * 
   * @throws javax.ejb.EJBException
   */
	public void ejbPassivate()
		throws javax.ejb.EJBException
	{
	}
	//End of Implementation of SessionBeanInterface methods.
	//Serialization of BeanObject is to be done here.....//
  /**
   * 
   * @param out
   * @throws java.io.IOException
   */
	/*private void writeObject(java.io.ObjectOutputStream out)
		throws java.io.IOException
	{
		//write non-serializable attributes here
		out.defaultWriteObject();
	}*/
  /**
   * 
   * @param in
   * @throws java.io.IOException
   * @throws java.lang.ClassNotFoundException
   */
   // @@ Commented by Santhosam for TogetherJ 
	/*private void readObject(java.io.ObjectInputStream in)
		throws java.io.IOException, ClassNotFoundException
	{
		//read non-serializable attributes here
		in.defaultReadObject();
	}*/
	// serialization done //
  /**
   * 
   * @return 
   * @throws javax.ejb.EJBException
   */
	public int getTruckTrailerMaintanenceOID()  
	{
        Connection  connection   = null;
        try
        {
           connection = getConnection();
           int oid = generateOID( connection, "TRUCKTRAILERMAINTANENCE" );
           return oid;
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
	        throw new EJBException("getAddressOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{
               if(connection != null )
    			{ connection.close(); }
			}
			catch( SQLException e )
			{
				//Logger.error(FILE_NAME,"Exception is : "+e);
        logger.error(FILE_NAME+"Exception is : "+e);
				throw new EJBException( "getAddressOID::finally::..."+e.toString() );
			}
   		}
	}//method ends here
  /**
   * 
   * @return strOid
   * @throws javax.ejb.EJBException
   */
		public String getPreventiveMntcOID()   
	{
        Connection  connection   = null;
        try
        {

           //to get running serial no
           connection = getConnection();
           int oid = generateOID( connection, "PREVENTIVEMNTC" );
           String strOid = (new Integer(oid)).toString();
           return (strOid);
        }
        catch( Exception e )
        {
			//Logger.error(FILE_NAME,"Exception is : "+e);
      logger.error(FILE_NAME+"Exception is : "+e);
 		    throw new EJBException("getPreventiveMntcOID:Exception::..."+e.toString());
        }
        finally
       	{
       		try
   			{
               if(connection != null )
    			{ connection.close(); }
			}
			catch( SQLException e )
			{
 				 //Logger.error(FILE_NAME,"Exception is : "+e);
         logger.error(FILE_NAME+"Exception is : "+e);
				 throw new EJBException( "getPreventiveMntcOID::finally::..."+e.toString() );
			}
   		}
	}
    
    /**
   * 
   * @param terminalId
   * @param customerId
   * @return 
   */
   private HouseDocumentCustDtl getCustomerDetails(String terminalId,String customerId)
    {
		HouseDocumentCustDtl customerDtl = new HouseDocumentCustDtl();
		Statement st = null;
		ResultSet charge = null;
		Connection connection=null;
		try
		{
			String sql = "SELECT COMPANYNAME,ABBRNAME,CUSTOMERADDRESSID FROM  FS_FR_CUSTOMERMASTER WHERE CUSTOMERID='"+customerId+"'";
			connection = this.getConnection();
			st = connection.createStatement();
			charge = st.executeQuery(sql);
			customerDtl.setTerminalId(terminalId);
			customerDtl.setCustomerId(customerId);
			int addressId=0;
			while(charge.next())
			{
			customerDtl.setCompanyName(charge.getString("COMPANYNAME"));
			customerDtl.setAbbrName(charge.getString("ABBRNAME"));
			addressId = charge.getInt("CUSTOMERADDRESSID");
			customerDtl.setAddressId(charge.getLong("CUSTOMERADDRESSID"));
			}
			charge = null;
			sql = "SELECT ADDRESSLINE1,ADDRESSLINE2,CITY,STATE,FS_COUNTRYMASTER.COUNTRYID COUNTRYID,ZIPCODE,EMAILID,PHONENO,FAX FROM FS_ADDRESS,FS_COUNTRYMASTER WHERE FS_ADDRESS.ADDRESSID= "+addressId+" and FS_ADDRESS.COUNTRYID=FS_COUNTRYMASTER.COUNTRYID ";
			charge = st.executeQuery(sql);
			while(charge.next())
			{
				customerDtl.setAddress1(charge.getString(1));
				customerDtl.setAddress2(charge.getString(2));
				customerDtl.setCity(charge.getString(3));
				customerDtl.setState(charge.getString(4));
				customerDtl.setCountryId(charge.getString(5));
				customerDtl.setZipCode(charge.getString(6));
				customerDtl.setEMailId(charge.getString(7));
				customerDtl.setPhoneNo(charge.getString(8));
				customerDtl.setFax(charge.getString(9));
			}
		}
		catch(SQLException sqEx)
        {
			//Logger.error(FILE_NAME, "[getCustomerDetails(terminalId, customerId)] -> "+sqEx.toString());
      logger.error(FILE_NAME+ "[getCustomerDetails(terminalId, customerId)] -> "+sqEx.toString());
            throw new EJBException(sqEx.toString());
        }
        finally
        {
			ConnectionUtil.closeConnection(connection, st, charge);
        }
		return customerDtl ;
    }
    //Method added by I.V.Sekhar Merrinti on 30-07-05 for BuySellChargeId generation
  public double getBuySellChargesOID(ESupplyGlobalParameters loginbean,String buyRsell)
  {
    Connection connection     = null;
   // PreparedStatement pstmt   = null;
    Statement stmt   = null;
    ResultSet         rs      = null;
    String    seqName         = "";
    if("Buy".equals(buyRsell))
      { seqName = "BUYSELL_SEQ";}      
    else if("Sell".equals(buyRsell))  
      { seqName = "SELLCHARGEID_SEQ";}
      
    String     selectQry      = "SELECT "+seqName+".NEXTVAL ID FROM DUAL";
    double     nextBuySelChargeId = 1;
    try
    {
      connection  = this.getConnection();
      //pstmt       = connection.prepareStatement(selectQry); chnged from pstmt to stmt by VLAKSHMI for memmory leakage 
     // rs          = pstmt.executeQuery();
      stmt           =connection.createStatement();
      rs            = stmt.executeQuery(selectQry);
      if(rs.next())
      {
        nextBuySelChargeId = rs.getDouble("ID");
      }
    }catch(SQLException e)
    {
      
    }catch(Exception e)
    {
      
    }finally
    {
      try
      {
        if(rs!=null)
          { rs.close();}
     /*   if(pstmt!=null)
          { pstmt.close();}*/
          if(stmt!=null)
          { stmt.close();}
        if(connection!=null)
          { connection.close();}
      }catch(SQLException e)
      {
        
      }
    }
    return nextBuySelChargeId;
  }
  //end for method getBuySellChargesOID()

  //@@Method added by Yuvraj for CR_DHLQMS_1005
  public double getBuyCartageOID()
  {
    Connection connection     = null;
    PreparedStatement pstmt   = null;
    ResultSet         rs      = null;
    String     selectQry      = "SELECT BUYCARTAGE_SEQ.NEXTVAL ID FROM DUAL";
    double     nextBuyCartageId = 0;
    try
    {
      connection  = this.getConnection();
      pstmt       = connection.prepareStatement(selectQry);
      rs          = pstmt.executeQuery();
      if(rs.next())
      {
        nextBuyCartageId = rs.getDouble("ID");
      }
    }catch(SQLException e)
    {
      
    }catch(Exception e)
    {
      
    }finally
    {
      try
      {
        if(rs!=null)
          { rs.close();}
        if(pstmt!=null)
          { pstmt.close();}
        if(connection!=null)
          { connection.close();}
      }catch(SQLException e)
      {
        
      }
    }
    return nextBuyCartageId;
  }
  //end for method getBuyCartageOID()
}