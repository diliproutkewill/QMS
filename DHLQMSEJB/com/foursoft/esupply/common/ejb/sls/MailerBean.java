package com.foursoft.esupply.common.ejb.sls;

/* ***********************************************
* Generated by Pramati Technologies, EJBWizard 
* Bean type: Stateless Session Bean
*
* You can have ONLY ONE ejbCreate() method.
* It SHOULD NOT take ANY parameter
* It can throw any RMI exception
*
* Wed Jan 09 14:01:31 IST 2002
* ************************************************/

/*Enterprise Bean instance can throw javax.ejb.EJBException or 
* java.lang.RuntimeException to its container to report that the invoked
* business method or callback method could not be completed because of an
* unexpected error (e.g. the instance failed to open a database connection).
*/
import java.rmi.RemoteException;
import javax.ejb.*;
import java.util.Date;

import javax.activation.DataHandler;
import javax.ejb.SessionContext;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Transport;
import javax.mail.Session;
import javax.mail.Multipart;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.InternetAddress;
import javax.naming.InitialContext;

//import com.foursoft.esupply.common.util.Logger;
import org.apache.log4j.Logger;
import com.foursoft.esupply.common.java.EMailMessage;

public class MailerBean
	implements SessionBean

{

	private		SessionContext sessionContext = null;
	String		FILENAME	=	"MailerBean.java" ;
  private static Logger logger = null;

	public MailerBean()
  {
    logger  = Logger.getLogger(MailerBean.class);
  }
	//Place your business methods here.
	
	public void sendMail(EMailMessage eMailMessage)
	{
        try {
            
    		//Logger.info(FILENAME, "IN MAIL BEAN BEFOR INTIAL CONTEXT");       
            InitialContext ic = new InitialContext();
            Session session = (Session) ic.lookup("java:comp/env/mail/MS");
			//Logger.info(FILENAME, "AFTER IC ");
            session.setDebug(true);
			//Logger.info(FILENAME, "AFTER SETING DEBUG ");
			InternetAddress[] fromAddr	= InternetAddress.parse(eMailMessage.getFromAddress() );
			
			//Logger.info(FILENAME, "AFTER FROM ADDRESS");
            // construct the message
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(fromAddr[0]);
			//Logger.info(FILENAME, "AFTER MESSAGE SER FORM ");
            msg.setRecipients(Message.RecipientType.TO, 
                     InternetAddress.parse(eMailMessage.getToAddress(), false));
			//Logger.info(FILENAME, "AFTER SETING MSG");
            msg.setSubject(eMailMessage.getSubject());
            String contentType = "text/plain";
			//Logger.info(FILENAME, "CONTENT TYPE IS "+contentType);
            MimeBodyPart mbp = new MimeBodyPart();
            // future - change content based on locale
            mbp.setText(eMailMessage.getMessage());
			//Logger.info(FILENAME, "AFTER MIME BODY IS ");
//            msg.setHeader("X-Mailer", "JavaMailer");
            Multipart mp = new MimeMultipart();
            mp.addBodyPart(mbp);
            msg.setContent(mp);
            msg.setSentDate(new Date());
			//Logger.info(FILENAME, "AFTER SETING MP MSG ");
            // send the mail off
            Transport.send(msg);
            //System.out.println("\nMail sent successfully.");
            
        } catch (Exception e) {
			if(eMailMessage.getNeedRollback() )
	            throw new EJBException("Failure while sending mail");
        }
		//Logger.info(FILENAME, "IN BEAN METHOD LAST ,,,,,");
	}

	public void ejbCreate() throws CreateException
	{
	}
		
	//Implementing SessionBeanInterface methods.....//
	public void setSessionContext(SessionContext sessionCtx) throws javax.ejb.EJBException
	{
		this.sessionContext = sessionCtx;
	}
	
	public void ejbRemove() throws javax.ejb.EJBException
	{
	}
	
	public void ejbActivate() throws javax.ejb.EJBException
	{
	}
	
	public void ejbPassivate() throws javax.ejb.EJBException
	{
	}
	
	//End of Implementation of SessionBeanInterface methods.

	//Serialization of BeanObject is to be done here.....//
	private void writeObject(java.io.ObjectOutputStream out)
		throws java.io.IOException
	{
		//write non-serializable attributes here

		out.defaultWriteObject();
	}

	private void readObject(java.io.ObjectInputStream in)
		throws java.io.IOException, ClassNotFoundException
	{
		//read non-serializable attributes here

		in.defaultReadObject();
	}
	// serialization done //
}
